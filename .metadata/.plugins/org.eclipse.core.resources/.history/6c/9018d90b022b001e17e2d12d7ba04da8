package com.report.controller;

import com.report.dao.StudentRepo;
import com.report.entities.Student;
import com.report.service.ReportGenerationService;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;



@Controller
public class ReportController {

    @Autowired
    private ReportGenerationService reportGenerationService;
    @Autowired
    private StudentRepo studentRepo;

    @GetMapping("/")
    public String showIndexPage() {
        return "index"; // This will render index.html using Thymeleaf
    }

    @GetMapping("/generatereport")
    public String redirectToGenerateReportPage(Model model) {
        // Perform any necessary logic and data handling here
        model.addAttribute("students", null); // Add this line to pass null initially
        return "generate_report"; // This will render generate_report.html using Thymeleaf
    }
    @GetMapping("/generate-report")
    @GetMapping("/generate-report")
    public String generateReport(@RequestParam("year") String year, @RequestParam("branch") String branch, Model model) {
        List<Student> students = reportGenerationService.getStudentsByYearAndBranch(year, branch);
        if (students.isEmpty()) {
            System.out.println("No data found for the specified year and branch.");
        }
        model.addAttribute("students", students); // Make sure the "students" attribute is added to the model
        return "generate_report";
    }
 


    @GetMapping(value = "/export/pdf", produces = MediaType.APPLICATION_PDF_VALUE)
    public ResponseEntity<byte[]> exportAsJasper(@RequestParam("year") String year, @RequestParam("branch") String branch) {
        byte[] reportBytes = reportGenerationService.generateReport(year, branch);

        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=report.pdf");

        return ResponseEntity.ok()
                .headers(headers)
                .contentType(MediaType.APPLICATION_PDF)
                .body(reportBytes);
    }

    @GetMapping(value = "/export/csv", produces = "text/csv")
    public ResponseEntity<String> exportAsCsv(@RequestParam String year, @RequestParam String branch, Model model) {
    	List<Student> students = studentRepo.findByYearAndBranch(year, branch);

        StringBuilder csvContent = new StringBuilder();
        csvContent.append("Roll Number,Name,Year,Branch,Attendance\n");
        for (Student student : students) {
            csvContent.append(student.getRollNumber()).append(",")
                      .append(student.getName()).append(",")
                      .append(student.getYear()).append(",")
                      .append(student.getBranch()).append(",")
                      .append(student.getAttendance()).append("\n");
        }

        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=report.csv");

        return ResponseEntity.ok()
                .headers(headers)
                .contentType(MediaType.parseMediaType("text/csv"))
                .body(csvContent.toString());
    }

    @GetMapping(value = "/export/excel", produces = "application/vnd.ms-excel")
    public ResponseEntity<byte[]> exportAsExcel(@RequestParam String year, @RequestParam String branch, Model model) {
    	List<Student> students = studentRepo.findByYearAndBranch(year, branch);

        try {
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            HSSFWorkbook workbook = new HSSFWorkbook();
            HSSFSheet sheet = workbook.createSheet("Student Data");

            int rowIdx = 0;
            HSSFRow headerRow = sheet.createRow(rowIdx++);
            headerRow.createCell(0).setCellValue("Roll Number");
            headerRow.createCell(1).setCellValue("Name");
            headerRow.createCell(2).setCellValue("Year");
            headerRow.createCell(3).setCellValue("Branch");
            headerRow.createCell(4).setCellValue("Attendance");

            for (Student student : students) {
                HSSFRow dataRow = sheet.createRow(rowIdx++);
                dataRow.createCell(0).setCellValue(student.getRollNumber());
                dataRow.createCell(1).setCellValue(student.getName());
                dataRow.createCell(2).setCellValue(student.getYear());
                dataRow.createCell(3).setCellValue(student.getBranch());
                dataRow.createCell(4).setCellValue(student.getAttendance());
            }

            workbook.write(outputStream);

            HttpHeaders headers = new HttpHeaders();
            headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=report.xls");

            return ResponseEntity.ok()
                    .headers(headers)
                    .contentType(MediaType.parseMediaType("application/vnd.ms-excel"))
                    .body(outputStream.toByteArray());
        } catch (IOException e) {
            e.printStackTrace();
            // Handle the exception as required
            return ResponseEntity.badRequest().build();
        }
    }

    @GetMapping(value = "/export/notepad", produces = MediaType.TEXT_PLAIN_VALUE)
    public ResponseEntity<String> exportAsNotepad(@RequestParam String year, @RequestParam String branch, Model model) {
    	List<Student> students = studentRepo.findByYearAndBranch(year, branch);

        StringBuilder notepadContent = new StringBuilder();
        notepadContent.append("Roll Number\tName\tYear\tBranch\tAttendance\n");
        for (Student student : students) {
            notepadContent.append(student.getRollNumber()).append("\t")
                           .append(student.getName()).append("\t")
                           .append(student.getYear()).append("\t")
                           .append(student.getBranch()).append("\t")
                           .append(student.getAttendance()).append("\n");
        }

        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=report.txt");

        return ResponseEntity.ok()
                .headers(headers)
                .contentType(MediaType.TEXT_PLAIN)
                .body(notepadContent.toString());
    }
}
