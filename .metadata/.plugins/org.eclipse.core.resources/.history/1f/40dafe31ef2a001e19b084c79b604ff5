package com.report.controller;

import com.report.dao.StudentRepo;
import com.report.entities.Student;
import com.report.service.ReportGenerationService;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;


@Controller
public class ReportController {



    
	
    @Autowired
    private ReportGenerationService reportGenerationService;
    @Autowired
    private StudentRepo studentRepo;
    @GetMapping("/")
    public String showIndexPage() {
        return "index"; // This will render index.html using Thymeleaf
    }

    

    @GetMapping("/generatereport")
    public String redirectToGenerateReportPage() {
        // Perform any necessary logic and data handling here
        return "generate_report"; // This will render generate_report.html using Thymeleaf
    }
    
    
    

    
    
    @GetMapping("/generate-report")
    public String generateReportPage(@RequestParam String year, @RequestParam String branch, Model model) {
        List<Student> students = reportGenerationService.getStudentsByYearAndBranch(year, branch);
        model.addAttribute("studentsData", students);
        return "generate_report";
    }
    
    @GetMapping(value = "/export/csv", produces = "text/csv")
    public ResponseEntity<String> exportAsCsv(@RequestParam String year, @RequestParam String branch) {
        List<Student> students = reportGenerationService.getStudentsByYearAndBranch(year, branch);
        // Call a method to convert the 'students' list to CSV format (e.g., using OpenCSV)
        String csvData = convertToCsv(students);
        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=student_data.csv");
        return ResponseEntity.ok()
                .headers(headers)
                .body(csvData);
    }
    
    @GetMapping(value = "/export/excel", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
    public ResponseEntity<byte[]> exportAsExcel(@RequestParam String year, @RequestParam String branch) {
        List<Student> students = reportGenerationService.getStudentsByYearAndBranch(year, branch);
        // Call a method to convert the 'students' list to Excel format (e.g., using Apache POI)
        byte[] excelData = convertToExcel(students);
        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=student_data.xlsx");
        return ResponseEntity.ok()
                .headers(headers)
                .contentType(MediaType.APPLICATION_OCTET_STREAM)
                .body(excelData);
    }

    
    @GetMapping(value = "/export/jasper", produces = MediaType.APPLICATION_PDF_VALUE)
    public ResponseEntity<byte[]> exportAsJasper(@RequestParam("year") String year, @RequestParam("branch") String branch) {
        byte[] reportBytes = reportGenerationService.generateReport(year, branch);

        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=report.pdf");

        return ResponseEntity.ok()
                .headers(headers)
                .contentType(MediaType.APPLICATION_PDF)
                .body(reportBytes);
    }
    
    public ResponseEntity<String> exportAsNotepad(@RequestParam String year, @RequestParam String branch) {
        List<Student> students = reportGenerationService.getStudentsByYearAndBranch(year, branch);
        // Call a method to convert the 'students' list to text format
        String textData = convertToText(students);
        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=student_data.txt");
        return ResponseEntity.ok()
                .headers(headers)
                .body(textData);
    }
    
    private String convertToCsv(List<Student> students) {
        // Implement the logic to convert 'students' list to CSV format
        // Return the CSV data as a string
        // Example implementation using OpenCSV:
        // CSVWriter writer = new CSVWriter(new StringWriter());
        // writer.writeAll(students.stream().map(student -> Arrays.asList(
        //     String.valueOf(student.getRollNumber()), student.getName(),
        //     student.getYear(), student.getBranch(), student.getAttendance()
        // )).collect(Collectors.toList()));
        // return writer.toString();
        return "";
    }
    
    private byte[] convertToExcel(List<Student> students) {
        // Implement the logic to convert 'students' list to Excel format
        // Return the Excel data as a byte array
        // Example implementation using Apache POI:
        // Workbook workbook = new XSSFWorkbook();
        // Sheet sheet = workbook.createSheet("Student Data");
        // int rowIndex = 0;
        // for (Student student : students) {
        //     Row row = sheet.createRow(rowIndex++);
        //     row.createCell(0).setCellValue(student.getRollNumber());
        //     row.createCell(1).setCellValue(student.getName());
        //     row.createCell(2).setCellValue(student.getYear());
        //     row.createCell(3).setCellValue(student.getBranch());
        //     row.createCell(4).setCellValue(student.getAttendance());
        // }
        // ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        // workbook.write(outputStream);
        // workbook.close();
        // return outputStream.toByteArray();
        return new byte[0];
    }
    
    private String convertToText(List<Student> students) {
        // Implement the logic to convert 'students' list to text format
        // Return the text data as a string
        // Example implementation:
        // StringBuilder builder = new StringBuilder();
        // for (Student student : students) {
        //     builder.append(student.getRollNumber()).append("\t")
        //            .append(student.getName()).append("\t")
        //            .append(student.getYear()).append("\t")
        //            .append(student.getBranch()).append("\t")
        //            .append(student.getAttendance()).append("\n");
        // }
        // return builder.toString();
        return "";
    }
}
