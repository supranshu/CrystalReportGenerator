package com.report.service;

import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.report.dao.StudentRepo;
import com.report.entities.Student;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

 
@Service
public class ReportGenerationService {

    @Autowired
    private StudentRepo studentRepo;
    private final InputStream reportTemplate = getClass().getResourceAsStream("/students.jrxml");
    
    public List<Student> getStudentsByYearAndBranch(String year, String branch) {
        List<Student> students = new ArrayList<>();
        // Add some hardcoded students here (for testing purposes)
        students.add(new Student(0, "John", "FE", "MechanicalEngineering", "Present"));
        students.add(new Student(0, "Alice", "SE", "ElectricalEngineering", "Absent"));
        students.add(new Student(0, "Bob", "TE", "ComputerScience", "Present"));
        // ... add more students
        return students;
    }

    
   

 // ...

 public byte[] generateReport(String year, String branch) {
     try {
         // Fetch data from the database (example: get all students)
         List<Student> students = getStudentsByYearAndBranch(year, branch);
         JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(students);

         // Load the .jrxml file from the classpath or file system
         // Move this line after fetching the data to avoid stream closure issues
         InputStream reportTemplate = getClass().getResourceAsStream("/students.jrxml");
         JasperReport jasperReport = JasperCompileManager.compileReport(reportTemplate);

         // Fill the report with data
         JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, dataSource);

         // Export the report to PDF format (you can use other formats like HTML, Excel, etc.)
         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
         JasperExportManager.exportReportToPdfStream(jasperPrint, outputStream);

         // Return the generated PDF as a byte array
         return outputStream.toByteArray();
     } catch (JRException e) {
         e.printStackTrace();
         // Handle the exception as required
         return null;
     } catch (Exception e) {
         e.printStackTrace();
         // Handle the exception as required
         return null;
     }
 }


}
